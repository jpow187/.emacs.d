* Emacs configuration

This configuration uses the use-package package from John Wiegley, which is a fantastic way to manage package configurations.cs Configuration
The code below can be used as a reference. I tried to write it so a toddler could understand what everything does, but when doing so it might not make complete sense so just refer to my packages and try to connect the dots.

** Installing emacs
#+BEGIN_SRC 
sudo apt-get install emacs   
#+END_SRC

** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jordan Powell")
#+END_SRC

* Sanity Configuration
  These are some simple configurations that make using emacs better.
They keep your sanity in check
** y-or-n

Change yes-or-no to y-or-n; saves you a couple keystrokes
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Cursor
Turn off blinking cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Backups

** Text Related Customizations
*** Parenthesis Mode

Show matching pairs of parentesis and other characters

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Tabs

Set the tab key to two spaces. Because people cannot agree on a standard of how many spaces a
tab is I have it set to 2 spaces. It just allows more flexibility and saves keystrokes

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode 1)
(setq tab-width 2)
#+END_SRC

*** Sentece Structure

Eliminate Double space after the end of a sentence.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** Line Wrap

This just lets the line wrap, rather than scrolling right and never ending.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode)
  :diminish 'visual-line-mode
#+END_SRC

** Quit beeping at me!!

Turns off the beep when you press and incorrect key

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Use spaces instead of tab character

#+BEGIN_SRC emacs-lisp
(progn
  ;; make indentation commands use space only (never tab character)
  (setq-default indent-tabs-mode nil)
  ;; emacs 23.1, 24.2, default to t
  ;; if indent-tabs-mode is t, it means it may use tab, resulting mixed space and tab
  )

#+END_SRC

** Launch Mmaximized

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Custom Defined Functions
** Time-Stamped Comments

#+BEGIN_SRC emacs-lisp
(defun comment-region-timestamp ()
  (interactive)
  (setq timestamp (format-time-string "(%d-%b-%y)"))
  (insert (format ";; jdp %s: " timestamp)))

#+END_SRC

* Themes
** Theme

#+BEGIN_SRC emacs-lisp 
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes") 
(load-theme 'master t)

#+END_SRC

** Fonts
Load preferred font on startup with a specified font size

#+BEGIN_SRC emacs-lisp
(set-default-font "Nimbus Mono L Bold 14")
(set-default 'preview-scale-function 12)
(setq org-format-latex-option (plist-put org-format-latex-options :scale 2.0))


#+END_SRC

** GUI Cleanup
*** Column/Line Number

Show column number

#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(global-linum-mode 0)
#+END_SRC

*** Clean Interface

Clean up the GUI. Eliminate unecesary tools

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)

(setq inhibit-startup-message 1)
(setq initial-scratch-message "")

#+END_SRC

* Major Modes
Packages from ELPA
** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
   (setq aw-keys '(?1 ?2 ?3 ?4 ?5))
   (setq aw-background nil)
  :init
   (progn
      (global-set-key [remap other-window] 'ace-window)
))

#+end_src

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t)
)

(use-package company-irony
  :ensure t
  :config 
  (add-to-list 'company-backends 'company-irony)

)

(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
)

#+END_SRC
** Evil Mode
   
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
#+end_src 

*** Undo Tree
Undo Tree is required for evil to work properly
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :bind
  (("C-S-z" . undo-tree-redo)
   ("C-z" . undo-tree-undo))
  :init
  (global-undo-tree-mode))

#+END_SRC

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer
  :commands 
  flycheck-mode) 
#+end_src
x
** Helm

#+BEGIN_SRC emacs-lisp

(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag :defer 10  :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode)
          (use-package helm-swoop
            :ensure t
            :bind ("H-w" . helm-swoop)))
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files))) 

#+END_SRC   

** HTMLize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
   
#+END_SRC
** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp 
(use-package macrostep
  :ensure t
  :bind ("C-h e" . macrostep-expand)
        ("C-h c" . macrostep-collapse))
#+end_src

** Magit
 
A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src 
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src 
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

*** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp 
(use-package org
  :ensure t
  :ensure org-plus-contrib)
#+END_SRC

org-bullets is a graphic overlay for org mode. Replaces colored astericks with bullet points

#+BEGIN_SRC emacs-lisp 
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


#+END_SRC
On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

*** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp 
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp

(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

*** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

*** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

*** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

*** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp 
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

*** Org exporting
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC

** Which Key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

** Yassnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t)
#+END_SRC

* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src 
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src 
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Custom Var doc

This section will create a custom file "custom.el" that will store custom variables defined by thel user. 


#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src
 
* Language Agnostic
** C/C++

#+BEGIN_SRC emacs-lisp
(use-package c++-mode
  :diminish
  :bind 
(("<f5>" . recompile)
   ("<f4>" . compile))
)
#+END_SRC

** Lisp 
#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
   :bind 
       ("C-j" . eval-print-last-sexp))

#+END_SRC

* Mode Line
** Icons

#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode t))
#+END_SRC

* KeyBindings
#+BEGIN_SRC emacs-lisp


#+END_SRC
